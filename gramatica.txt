<S> ::= <GlobalDeclaration> <S1>    
<S1> ::= <GlobalDeclaration> <S1> | 'vazio'
<GlobalDeclaration> ::= <StartDef> | <VarDef> | <ConstDef> | <StructDef> | <FunctionDef> | <ProcedureDef> | <TypedefDef>
<FunctionDef> ::= 'function' <Type> <Declarator> '(' <FunctionDeflf>
<FunctionDeflf> ::= <Parameter List> ')' '{' <StmtOrDeclarationList> '}' | ')' '{' <StmtOrDeclarationList> '}' 
<ProcedureDef> ::= 'procedure' 'Identifier' '(' <ProcedureDeflf>
<ProcedureDeflf> ::= <ParameterList> ')' '{' <StmtOrDeclarationList> '}' |  ')' '{' <StmtOrDeclarationList> '}' 
<TypedefDef> ::= 'typedef' <TypedefDeflf>              
<TypedefDeflf> ::= <Type> 'Identifier' ';' | <StructDef> 'Identifier' ';'
<VarDef> ::= 'var' '{' <DeclarationList> '}'
<ConstDef> ::= 'const' '{' <DeclarationList> '}'
<StructDef> ::= 'struct' 'Identifier' <StructDeflf>             
<StructDeflf> ::= '{' <DeclarationList> '}' | 'extends' 'Identifier' '{' <DeclarationList> '}'
<ParameterList> ::= <ParameterDeclaration> <ParameterList1>            
<ParameterList1> ::= ',' <ParameterDeclaration> <ParameterList1> | 'vazio'
<ParameterDeclaration> ::= <Type> <Declarator>
<DeclarationList> ::= <Declaration> <DeclarationList1>                    
<DeclarationList1> ::= <Declaration> <DeclarationList1> | 'vazio'
<Declaration> ::= <Type> <InitDeclaratorList> ';'
<InitDeclaratorList> ::= <InitDeclarator> <InitDeclaratorList1>                        
<InitDeclaratorList1> ::= ',' <InitDeclarator> <InitDeclaratorList1> | 'vazio'
<InitDeclarator> ::= <Declarator> <InitDeclaratorlf>
<InitDeclaratorlf> ::= '=' <Initializer> | 'vazio'
<Initializer> ::= <AssignExpr> | '{' <InitializerList> <Initializerlf>
<Initializerlf> ::= '}' | ',' '}'              
<InitializerList> ::= <Initializer> <InitializerList1>                 
<InitializerList1> ::= ',' <Initializer> <InitializerList1> | 'vazio'
<Declarator> ::= 'Identifier' <Declarator1>           
<Declarator1> ::= '[' <Declarator1lf> | 'vazio'
<Declarator1lf> ::= <CondExpr> ']' <Declarator1> | ']' <Declarator1>
<Stmt> ::= <IterationStmt> | <ExprStmt> | <CompoundStmt>  | <PrintStmt> | <ScanStmt> | <IfStmt> | <ReturnStmt>
<StmtOrDeclarationList> ::= <Stmt> <StmtOrDeclarationList1> | <VarDef> <StmtOrDeclarationList1>                    
<StmtOrDeclarationList1> ::= <Stmt> <StmtOrDeclarationList1> | <VarDef> <StmtOrDeclarationList1> | 'vazio'
<StartDef> ::= 'start' '(' ')' '{' <StmtOrDeclarationList> '}'
<PrintStmt> ::= 'print' '(' <ArgumentList> ')' ';'              
<ScanStmt> ::= 'scan' '(' <ArgumentList> ')' ';'
<IterationStmt> ::= 'while' '(' <Expr> ')' <Stmt>
<IfStmt> ::= 'if' <Expr> 'then' <Stmt> <IfStmtlf>    
<IfStmtlf> ::= 'else' <Stmt> | 'vazio'
<ReturnStmt> ::= 'return' <Expr> ';'
<CompoundStmt> ::= '{' <CompoundStmtlf>              
<CompoundStmtlf> ::= '}' | <StmtOrDeclarationList> '}'
<ExprStmt> ::= ';' | <Expr> ';'
<Expr> ::= <AssignExpr> <Expr1>     
<Expr1> ::= ',' <AssignExpr> <Expr1> | 'vazio'
<AssignExpr> ::= <CondExpr> <AssignExpr1>                    
<AssignExpr1> ::= '=' <CondExpr> <AssignExpr1> | 'vazio'
<CondExpr> ::= <LogicalOrExpr>            
<LogicalOrExpr> ::= <LogicalAndExpr> <LogicalOrExpr1>       
<LogicalOrExpr1> ::= '||' <LogicalAndExpr> <LogicalOrExpr1> | 'vazio'
<LogicalAndExpr> ::= <EqualExpr> <LogicalAndExpr1>
<LogicalAndExpr1> ::= '&&' <EqualExpr> <LogicalAndExpr1> | 'vazio'
<EqualExpr> ::= <RelationalExpr> <EqualExpr1>
<EqualExpr1> ::= <EqualOp> <RelationalExpr> <EqualExpr1> | 'vazio'
<RelationalExpr> ::= <AdditiveExpr> <RelationalExpr1>           
<RelationalExpr1> ::= <RelationalOp> <AdditiveExpr> <RelationalExpr1> | 'vazio'
<AdditiveExpr> ::= <MultExpr> <AdditiveExpr1>          
<AdditiveExpr1> ::= <AdditiveOp> <MultExpr> <AdditiveExpr1> | 'vazio'
<MultExpr> ::= <UnaryExpr> <MultExpr1>          
<MultExpr1> ::= <MultOp> <UnaryExpr> <MultExpr1> | 'vazio'
<UnaryExpr> ::= <UnaryOp> <UnaryExpr> | <PostfixExpr>              
<PostfixExpr> ::= <PrimaryExpr> <PostfixExpr1>               
<PostfixExpr1> ::= <PostfixOp> <PostfixExpr1> | 'vazio'
<PrimaryExpr> ::= 'Identifier' | 'Number' | 'Literal' | 'true' | 'false' | '(' <Expr> ')' 
<EqualOp> ::= '==' | '!='
<RelationalOp> ::= '<' | '>' | '<=' | '>='       
<AdditiveOp> ::= '+' | '-'     
<MultOp> ::= '*' | '/'          
<UnaryOp> ::= '++' | '--' | '!'
<PostfixOp> ::= '++' | '--' | '[' <Expr> ']' | '(' <PostfixOplf> | '.' 'Identifier'              
<PostfixOplf> ::= ')' | <ArgumentList> ')'
<ArgumentList> ::= <AssignExpr> <ArgumentList1>            
<ArgumentList1> ::= ',' <AssignExpr> <ArgumentList1> | 'vazio'
<Type> ::= 'int' | 'string' | 'float' | 'bool'  | 'Identifier'