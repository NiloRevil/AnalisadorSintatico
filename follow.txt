<Expr> -> [']', ';', 'then', ')']
<Declaration> -> ['}', 'bool', 'float', 'int', 'string', IDENTIFICADOR]
<Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Expr Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Parameter Declaration> -> [',', ')']
<Additive Expr> -> [',', 'then', ')', '<=', '||', '==', '&&', '>', '=', ']', '}', '<', '!=', '>=', ';']
<Procedure Def lf> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Procedure Def> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Declaration List> -> ['}']
<Parameter List 1> -> [')']
<S> -> [$]
<Declarator> -> ['=', ',', ';', ')', '(']
<Logical Or Expr> -> ['=', ']', '}', ',', ';', 'then', ')']
<Logical And Expr> -> ['=', ']', '}', ',', ';', 'then', ')', '||']
<Relational Op> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Parameter List> -> [')']
<Argument List> -> [')']
<Initializer lf> -> ['}', ',', ';']
<Additive Expr 1> -> [',', 'then', ')', '<=', '||', '==', '&&', '>', '=', ']', '}', '<', '!=', '>=', ';']
<Cond Expr> -> ['=', ']', '}', ',', ';', 'then', ')']
<Logical Or Expr 1> -> ['=', ']', '}', ',', ';', 'then', ')']
<Unary Op> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Scan Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Postfix Expr 1> -> ['-', ',', '+', 'then', '*', ')', '<=', '||', '==', '&&', '>', '=', ']', '}', '<', '!=', '>=', ';', '/']
<Var Def> -> ['false', $, '(', 'return', 'print', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'true', 'procedure', 'struct', 'typedef', 'function', 'start', '!', 'scan', CADEIACARACTERES, 'const', 'var', IDENTIFICADOR]
<Function Def> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Argument List 1> -> [')']
<Type> -> [IDENTIFICADOR]
<Typedef Def> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Logical And Expr 1> -> ['=', ']', '}', ',', ';', 'then', ')', '||']
<Relational Expr 1> -> ['=', ']', '}', '!=', ',', ';', 'then', ')', '||', '==', '&&']
<Struct Def> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start', IDENTIFICADOR]
<Initializer> -> ['}', ',', ';']
<S 1> -> [$]
<Additive Op> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Function Def lf> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Assign Expr 1> -> [']', '}', ',', ';', 'then', ')']
<Equal Op> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Init Declarator List> -> [';']
<Typedef Def lf> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Declaration List 1> -> ['}']
<Stmt Or Declaration List> -> ['}']
<Declarator 1 lf> -> ['=', ',', ';', ')', '(']
<Iteration Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Primary Expr> -> [',', '*', '(', '<=', '++', '--', '==', '=', '}', '!=', ';', '/', '-', '+', 'then', ')', '||', '&&', '>', ']', '<', '[', '>=', '.']
<Start Def> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Init Declarator> -> [',', ';']
<Mult Expr> -> ['-', ',', '+', 'then', ')', '<=', '||', '==', '&&', '>', '=', ']', '}', '<', '!=', '>=', ';']
<Initializer List 1> -> ['}', ',']
<Const Def> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Stmt Or Declaration List 1> -> ['}']
<Mult Expr 1> -> ['-', ',', '+', 'then', ')', '<=', '||', '==', '&&', '>', '=', ']', '}', '<', '!=', '>=', ';']
<If Stmt lf> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<If Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Init Declarator lf> -> [',', ';']
<Compound Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Relational Expr> -> ['=', ']', '}', '!=', ',', ';', 'then', ')', '||', '==', '&&']
<Return Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Print Stmt> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Postfix Expr> -> ['-', ',', '+', 'then', '*', ')', '<=', '||', '==', '&&', '>', '=', ']', '}', '<', '!=', '>=', ';', '/']
<Global Declaration> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Postfix Op lf> -> ['-', ',', '+', 'then', '*', ')', '(', '<=', '||', '++', '--', '==', '&&', '>', '=', ']', '}', '<', '!=', '[', '>=', ';', '/', '.']
<Equal Expr 1> -> ['=', ']', '}', ',', ';', 'then', ')', '||', '&&']
<Unary Expr> -> ['-', ',', '+', 'then', '*', ')', '<=', '||', '==', '&&', '>', '=', ']', '}', '<', '!=', '>=', ';', '/']
<Struct Def lf> -> ['struct', $, 'procedure', 'typedef', 'const', 'function', 'var', 'start', IDENTIFICADOR]
<Assign Expr> -> [']', '}', ',', ';', 'then', ')']
<Expr 1> -> [']', ';', 'then', ')']
<Equal Expr> -> ['=', ']', '}', ',', ';', 'then', ')', '||', '&&']
<Compound Stmt lf> -> ['false', '(', 'return', 'print', 'else', '!', '++', '--', NUMERO, '}', 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Initializer List> -> ['}', ',']
<Mult Op> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Postfix Op> -> [',', '*', '(', '<=', '++', '--', '==', '=', '}', '!=', ';', '/', '-', '+', 'then', ')', '||', '&&', '>', ']', '<', '[', '>=', '.']
<Declarator 1> -> ['=', ',', ';', ')', '(']
<Init Declarator List 1> -> [';']
