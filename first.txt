FIRST TOKENS
<Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Declaration> -> ['bool', 'float', 'int', 'string', IDENTIFICADOR]
<Stmt> -> ['false', '(', 'return', 'print', '!', '++', '--', NUMERO, 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, IDENTIFICADOR]
<Expr Stmt> -> [NUMERO, 'false', ';', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Parameter Declaration> -> ['bool', 'float', 'int', 'string', IDENTIFICADOR]
<Additive Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Procedure Def lf> -> ['bool', ')', 'float', 'int', 'string', IDENTIFICADOR]
<Procedure Def> -> ['procedure']
<Declaration List> -> ['bool', 'float', 'int', 'string', IDENTIFICADOR]
<Parameter List 1> -> [',', ]
<S> -> ['struct', 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Declarator> -> [IDENTIFICADOR]
<Logical Or Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Logical And Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Relational Op> -> ['<', '>=', '<=', '>']
<Parameter List> -> ['bool', 'float', 'int', 'string', IDENTIFICADOR]
<Argument List> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Initializer lf> -> ['}', ',']
<Additive Expr 1> -> ['-', '+', ]
<Cond Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Logical Or Expr 1> -> ['||', ]
<Unary Op> -> ['!', '++', '--']
<Scan Stmt> -> ['scan']
<Postfix Expr 1> -> ['[', '(', '++', '--', '.', ]
<Var Def> -> ['var']
<Function Def> -> ['function']
<Argument List 1> -> [',', ]
<Type> -> ['bool', 'float', 'int', 'string', IDENTIFICADOR]
<Typedef Def> -> ['typedef']
<Logical And Expr 1> -> ['&&', ]
<Relational Expr 1> -> ['<', '>=', '<=', '>', ]
<Struct Def> -> ['struct']
<Initializer> -> [NUMERO, 'false', '{', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<S 1> -> ['struct', 'procedure', 'typedef', 'const', 'function', 'var', 'start', ]
<Additive Op> -> ['-', '+']
<Function Def lf> -> ['bool', ')', 'float', 'int', 'string', IDENTIFICADOR]
<Assign Expr 1> -> ['=', ]
<Equal Op> -> ['!=', '==']
<Init Declarator List> -> [IDENTIFICADOR]
<Typedef Def lf> -> ['bool', 'struct', 'float', 'int', 'string', IDENTIFICADOR]
<Declaration List 1> -> ['bool', 'float', 'int', 'string', IDENTIFICADOR, ]
<Stmt Or Declaration List> -> ['false', '(', 'return', 'print', '!', '++', '--', NUMERO, 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Declarator 1 lf> -> [NUMERO, ']', 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Iteration Stmt> -> ['while']
<Primary Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR]
<Start Def> -> ['start']
<Init Declarator> -> [IDENTIFICADOR]
<Mult Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Initializer List 1> -> [',', ]
<Const Def> -> ['const']
<Stmt Or Declaration List 1> -> ['false', '(', 'return', 'print', '!', '++', '--', NUMERO, 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR, ]
<Mult Expr 1> -> ['*', '/', ]
<If Stmt lf> -> ['else', ]
<If Stmt> -> ['if']
<Init Declarator lf> -> ['=', ]
<Compound Stmt> -> ['{']
<Relational Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Return Stmt> -> ['return']
<Print Stmt> -> ['print']
<Postfix Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR]
<Global Declaration> -> ['struct', 'procedure', 'typedef', 'const', 'function', 'var', 'start']
<Postfix Op lf> -> [NUMERO, 'false', ')', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Equal Expr 1> -> ['!=', '==', ]
<Unary Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Struct Def lf> -> ['extends', '{']
<Assign Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Expr 1> -> [',', ]
<Equal Expr> -> [NUMERO, 'false', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Compound Stmt lf> -> ['false', '(', 'return', 'print', '!', '++', '--', '}', NUMERO, 'if', 'while', ';', '{', 'scan', 'true', CADEIACARACTERES, 'var', IDENTIFICADOR]
<Initializer List> -> [NUMERO, 'false', '{', 'true', CADEIACARACTERES, '(', IDENTIFICADOR, '!', '++', '--']
<Mult Op> -> ['*', '/']
<Postfix Op> -> ['[', '(', '++', '--', '.']
<Declarator 1> -> ['[', ]
<Init Declarator List 1> -> [',', ]
