<S>, 'struct' -> <S> ::= <GlobalDeclaration> <S1>   
<S>, 'procedure' -> <S> ::= <GlobalDeclaration> <S1>   
<S>, 'typedef' -> <S> ::= <GlobalDeclaration> <S1>   
<S>, 'const' -> <S> ::= <GlobalDeclaration> <S1>   
<S>, 'function' -> <S> ::= <GlobalDeclaration> <S1>   
<S>, 'var' -> <S> ::= <GlobalDeclaration> <S1>  
<S>, 'start' -> <S> ::= <GlobalDeclaration> <S1>  

<S1>, 'struct' -> <S1> ::= <GlobalDeclaration> <S1>
<S1>, 'procedure' -> <S1> ::= <GlobalDeclaration> <S1>
<S1>, 'typedef' -> <S1> ::= <GlobalDeclaration> <S1>
<S1>, 'const' -> <S1> ::= <GlobalDeclaration> <S1>
<S1>, 'function' -> <S1> ::= <GlobalDeclaration> <S1>
<S1>, 'var' -> <S1> ::= <GlobalDeclaration> <S1>
<S1>, 'start' -> <S1> ::= <GlobalDeclaration> <S1>
<S1>, ‘$' -> <S1> ::= ‘£’

<GlobalDeclaration>, 'start' -> <GlobalDeclaration> ::= <StartDef> 
<GlobalDeclaration>, ‘var’ -> <GlobalDeclaration> ::= <VarDef>
<GlobalDeclaration>, ‘const’ -> <GlobalDeclaration> ::= <ConstDef>
<GlobalDeclaration>, ‘struct’ -> <GlobalDeclaration> ::= <StructDef>
<GlobalDeclaration>, ‘function’ -> <GlobalDeclaration> ::= <FunctionDef>
<GlobalDeclaration>, ‘procedure’ -> <GlobalDeclaration> ::= <ProcedureDef>
<GlobalDeclaration>, ‘typedef’ -> <GlobalDeclaration> ::= <TypedefDef>

<FunctionDef>, 'function' -> <FunctionDef> ::= 'function' <Type> <Declarator> '(' <ParameterList> ')' '{' <StmtOrDeclarationList> '}' 

<ProcedureDef>, 'procedure'-> <ProcedureDef> ::= 'procedure' 'Identifier' '(' <ParameterList> ')' '{' <StmtOrDeclarationList> '}'

<TypedefDef>, ‘typedef’ -> <TypedefDef> ::= 'typedef' <TypedefDeflf>

<TypedefDeflf>, 'bool' -> <TypedefDeflf> ::= <Type> 'Identifier' ';'   
<TypedefDeflf>, 'float' -> <TypedefDeflf> ::= <Type> 'Identifier' ';'   
<TypedefDeflf>, 'int' -> <TypedefDeflf> ::= <Type> 'Identifier' ';'   
<TypedefDeflf>, 'string' -> <TypedefDeflf> ::= <Type> 'Identifier' ';'   
<TypedefDeflf>, IDENTIFICADOR -> <TypedefDeflf> ::= <Type> 'Identifier' ';'   
<TypedefDeflf>, ‘struct’ -> <TypedefDeflf> ::= <StructDef> 'Identifier' ';'   

<VarDef>, ‘var’ -> <VarDef> ::= 'var' '{' <DeclarationList> '}'

<ConstDef>, ‘const’ -> <ConstDef> ::= 'const' '{' <DeclarationList> '}'

<StructDef>, struct -> <StructDef> ::= 'struct' 'Identifier' <StructDeflf> 

<StructDeflf>, '{' -> <StructDeflf> ::= '{' <DeclarationList> '}'

<StructDeflf>, 'extends' -> <StructDeflf> ::= 'extends' 'Identifier' '{' <DeclarationList> '}'

<Parameter List>, 'int' -> <Parameter List> ::= <Parameter Declaration> <Parameter List 1>
<Parameter List>, 'string' -> <Parameter List> ::= <Parameter Declaration> <Parameter List 1>  
<Parameter List>, 'float' -> <Parameter List> ::= <Parameter Declaration> <Parameter List 1>  
<Parameter List>, 'bool' -> <Parameter List> ::= <Parameter Declaration> <Parameter List 1>  
<Parameter List>, 'IDENTIFICADOR' -> <Parameter List> ::= <Parameter Declaration> <Parameter List 1>    

<Parameter List 1>, ',' -> <Parameter List 1> ::= ',' <Parameter Declaration> <Parameter List 1> 
<Parameter List 1>, ')' -> <Parameter List 1> ::= ‘£’

<Parameter Declaration>, 'bool' -> <Parameter Declaration> ::= <Type> <Declarator>
<Parameter Declaration>, 'float' -> <Parameter Declaration> ::= <Type> <Declarator>
<Parameter Declaration>, 'int' -> <Parameter Declaration> ::= <Type> <Declarator>
<Parameter Declaration>, 'string' -> <Parameter Declaration> ::= <Type> <Declarator>
<Parameter Declaration>, IDENTIFICADOR -> <Parameter Declaration> ::= <Type> <Declarator>

<Declaration List>, 'bool' -> <Declaration List> ::= <Declaration> <Declaration List 1> 
<Declaration List>, 'float' -> <Declaration List> ::= <Declaration> <Declaration List 1> 
<Declaration List>, 'int' -> <Declaration List> ::= <Declaration> <Declaration List 1> 
<Declaration List>, 'string' -> <Declaration List> ::= <Declaration> <Declaration List 1> 
<Declaration List>, IDENTIFICADOR -> <Declaration List> ::= <Declaration> <Declaration List 1> 

<Declaration List 1>, 'bool' -> <Declaration List 1> ::= <Declaration> <Declaration List 1>
<Declaration List 1>, 'float' -> <Declaration List 1> ::= <Declaration> <Declaration List 1>
<Declaration List 1>, 'int' -> <Declaration List 1> ::= <Declaration> <Declaration List 1>
<Declaration List 1>, 'string' -> <Declaration List 1> ::= <Declaration> <Declaration List 1>
<Declaration List 1>, IDENTIFICADOR -> <Declaration List 1> ::= <Declaration> <Declaration List 1>
<Declaration List 1>, '}' -> ‘£’

<Declaration>, 'bool' -> <Declaration> ::= <Type> <Init Declarator List> ';'
<Declaration>, 'float' -> <Declaration> ::= <Type> <Init Declarator List> ';'
<Declaration>, 'int' -> <Declaration> ::= <Type> <Init Declarator List> ';'
<Declaration>, 'string' -> <Declaration> ::= <Type> <Init Declarator List> ';'
<Declaration>, IDENTIFICADOR -> <Declaration> ::= <Type> <Init Declarator List> ';'

<Init Declarator List>, IDENTIFICADOR -> <Init Declarator List> ::= <Init Declarator> <Init Declarator List 1>  

<Init Declarator List 1>, ',' -> <Init Declarator List 1> ::= ',' <Init Declarator> <Init Declarator List 1>
<Init Declarator List 1>, ';' -> <Init Declarator List 1> ::= ‘£’

<Init Declarator>, IDENTIFICADOR -> <Init Declarator> ::= <Declarator> <Init Declarator lf>

<Init Declarator lf>, '=' -> <Init Declarator lf> ::= '=' <Initializer> 
<Init Declarator lf>, ',' -> <Init Declarator lf> ::= ‘£’
<Init Declarator lf>, ';' -> <Init Declarator lf> ::= ‘£’

<Initializer>, NUMERO -> <Initializer> ::= <Assign Expr> 
<Initializer>, 'false' -> <Initializer> ::= <Assign Expr> 
<Initializer>, 'true' -> <Initializer> ::= <Assign Expr> 
<Initializer>, CADEIACARACTERES -> <Initializer> ::= <Assign Expr> 
<Initializer>, '(' -> <Initializer> ::= <Assign Expr> 
<Initializer>, IDENTIFICADOR -> <Initializer> ::= <Assign Expr> 
<Initializer>, '!' -> <Initializer> ::= <Assign Expr> 
<Initializer>, '++' -> <Initializer> ::= <Assign Expr> 
<Initializer>, '--' -> <Initializer> ::= <Assign Expr> 
<Initializer>, '{' -> <Initializer> ::= '{' <Initializer List> <Initializer lf>

<Initializer lf>, '}' -> <Initializer lf> ::= '}'
<Initializer lf>, ',' -> <Initializer lf> ::= ',' '}'

<Initializer List>, NUMERO -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, 'false' -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, '{' -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, 'true' -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, CADEIACARACTERES -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, '(' -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, IDENTIFICADOR -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, '!' -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, '++' -> <Initializer List> ::= <Initializer> <Initializer List 1>
<Initializer List>, '--' -> <Initializer List> ::= <Initializer> <Initializer List 1>     

<Initializer List 1>, ',' -> <Initializer List 1> ::= ',' <Initializer> <Initializer List 1>
<Initializer List 1>, '}' -> ‘£’
<Initializer List 1>, ',' -> ‘£’

<Declarator>, 'Identifier' -> <Declarator> ::= 'Identifier' <Declarator 1>    

<Declarator 1>, '[' -> Declarator 1> ::= '[' <Declarator 1 lf>   
<Declarator 1>, '=' -> Declarator 1> ::= '£’
<Declarator 1>, ',' -> Declarator 1> ::= '£’
<Declarator 1>, ';' -> Declarator 1> ::= '£’
<Declarator 1>, ')' -> Declarator 1> ::= '£’
<Declarator 1>, '(' -> Declarator 1> ::= '£’

<Declarator 1 lf>, NUMERO -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, 'false' -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, 'true' -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, ‘CADEIACARACTERES’ -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, '(' -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, ‘IDENTIFICADOR’ -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, '!' -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, '++' -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, '--' -> <Declarator 1 lf> ::= <Cond Expr> ']' <Declarator 1>
<Declarator 1 lf>, ']' -> <Declarator 1 lf> ::= ']' <Declarator 1>

<Stmt>, 'while' -> <Stmt> ::= <Iteration Stmt>
<Stmt>, NUMERO  -> <Stmt> ::= <Expr Stmt>
<Stmt>, 'false' -> <Stmt> ::= <Expr Stmt>
<Stmt>, ';' -> <Stmt> ::= <Expr Stmt>
<Stmt>, 'true' -> <Stmt> ::= <Expr Stmt>
<Stmt>, CADEIACARACTERES -> <Stmt> ::= <Expr Stmt>
<Stmt>, '(' -> <Stmt> ::= <Expr Stmt>
<Stmt>, IDENTIFICADOR -> <Stmt> ::= <Expr Stmt>
<Stmt>, '!' -> <Stmt> ::= <Expr Stmt>
<Stmt>, '++' -> <Stmt> ::= <Expr Stmt>
<Stmt>, '--' -> <Stmt> ::= <Expr Stmt>
<Stmt>, '{' -> <Stmt> ::= <Compound Stmt>
<Stmt>, 'print' -> <Stmt> ::= <Print Stmt>
<Stmt>, 'scan' -> <Stmt> ::= <Scan Stmt> 
<Stmt>, 'if' -> <Stmt> ::= <If Stmt> 
<Stmt>, 'return' -> <Stmt> ::= <Return Stmt>

<Stmt Or Declaration List>, 'false' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, ‘(' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, 'return' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, 'print' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, '!' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, '++' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, '--' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, NUMERO -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, 'if' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, 'while' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, ';' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, '{' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, 'scan' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, 'true' -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, CADEIACARACTERES -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, ‘IDENTIFICADOR’ -> <Stmt Or Declaration List> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List>, 'var' -> <Stmt Or Declaration List> ::= <Var Def> <Stmt Or Declaration List 1>  

<Stmt Or Declaration List 1>, 'false' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, '(' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, 'return' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, 'print' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, '!' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, '++' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, '--' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, NUMERO -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, 'if' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, 'while' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, ';' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, '{' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, 'scan' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, 'true' -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, CADEIACARACTERES -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, IDENTIFICADOR -> <Stmt Or Declaration List 1> ::= <Stmt> <Stmt Or Declaration List 1> 
<Stmt Or Declaration List 1>, ‘var’ -> <Stmt Or Declaration List 1> ::= <Var Def> <Stmt Or Declaration List 1>
<Stmt Or Declaration List 1>, '}' -> <Stmt Or Declaration List 1> ::= ‘£’

<Print Stmt>, ‘print’ -> <Print Stmt> ::= 'print' '(' <Argument List> ')' ';'     
         
<Scan Stmt>, ‘scan’ -> <Scan Stmt> ::= 'scan' '(' <Argument List> ')' ';'

<Iteration Stmt>, ‘while’ -> <Iteration Stmt> ::= 'while' '(' <Expr> ')' <Stmt>

<If Stmt>, ‘if’ -> <If Stmt> ::= 'if' <Expr> 'then' <Stmt> <If Stmt lf>    

<If Stmt lf>, ‘else’ -> <If Stmt lf> ::= 'else' <Stmt>
<If Stmt lf>, 'false' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, '(' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, 'return' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, 'print' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, 'else' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, '!' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, '++' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, '--' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, NUMERO -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, '}' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, 'if' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, 'while' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, ';' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, '{' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, 'scan' -> <If Stmt lf> ::= ‘£’
<If Stmt lf>, 'true' -> <If Stmt lf> ::= ‘£’    
<If Stmt lf>, ‘CADEIACARACTERES’ -> <If Stmt lf> ::= ‘£’    
<If Stmt lf>, 'var' -> <If Stmt lf> ::= ‘£’    
<If Stmt lf>, ‘IDENTIFICADOR’ -> <If Stmt lf> ::= ‘£’    
               
<Return Stmt>, ‘return’ -> <Return Stmt> ::= 'return' <Expr> ';'

<Compound Stmt>, ‘{‘ -> <Compound Stmt> ::= '{' <Compound Stmt lf>              

<Compound Stmt lf>, '}' -> <Compound Stmt lf> ::= '}'
<Compound Stmt lf>, 'false' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, '(' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, 'return' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, 'print' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, '!' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, '++' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, '--' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, ‘NUMERO’ -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, 'if' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, 'while' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, ';' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, '{' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, 'scan' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, 'true' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, ‘CADEIACARACTERES’ -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, 'var' -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'
<Compound Stmt lf>, ‘IDENTIFICADOR’ -> <Compound Stmt lf> ::= <Stmt Or Declaration List> '}'

<Expr Stmt>, ';' -> <Expr Stmt> ::= ';' 
<Expr Stmt>, ‘NUMERO’ -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, 'false' -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, 'true' -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, ‘CADEIACARACTERES’ -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, '(' -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, IDENTIFICADOR -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, '!' -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, '++' -> <Expr Stmt> ::= <Expr> ';'
<Expr Stmt>, '--' -> <Expr Stmt> ::= <Expr> ';'

<Expr>, ‘NUMERO’ -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, 'false' -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, 'true' -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, CADEIACARACTERES -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, '(' -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, IDENTIFICADOR -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, '!' -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, '++' -> <Expr> ::= <Assign Expr> <Expr 1>
<Expr>, '--' -> <Expr> ::= <Assign Expr> <Expr 1>  

<Expr 1>, ',' -> <Expr 1> ::= ',' <Assign Expr> <Expr 1> 
<Expr 1>, ']' -> <Expr 1> ::= '£’
<Expr 1>, ';' -> <Expr 1> ::= '£’
<Expr 1>, 'then' -> <Expr 1> ::= '£’
<Expr 1>, ')' -> <Expr 1> ::= '£’

<Assign Expr>, ‘NUMERO’ -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, 'false' -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, 'true' -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, ‘CADEIACARACTERES’ -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, '(' -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, ‘IDENTIFICADOR’ -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, '!' -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, '++' -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
<Assign Expr>, '--' -> <Assign Expr> ::= <Cond Expr> <Assign Expr 1>
                    
<Assign Expr 1>, '=' -> <Assign Expr 1> ::= '=' <Cond Expr> <Assign Expr 1>
<Assign Expr 1>, ']' -> <Assign Expr 1> ::= '£’
<Assign Expr 1>, '}' -> <Assign Expr 1> ::= '£’
<Assign Expr 1>, ',' -> <Assign Expr 1> ::= '£’
<Assign Expr 1>, ';' -> <Assign Expr 1> ::= '£’
<Assign Expr 1>, 'then' -> <Assign Expr 1> ::= '£’
<Assign Expr 1>, ')' -> <Assign Expr 1> ::= '£’

<Cond Expr>, ‘NUMERO’ -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, 'false' -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, 'true' -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, ‘CADEIACARACTERES’ -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, '(' -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, IDENTIFICADOR -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, '!' -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, '++' -> <Cond Expr> ::= <Logical Or Expr>
<Cond Expr>, '--'  -> <Cond Expr> ::= <Logical Or Expr>          

<Logical Or Expr>, ‘NUMERO’ -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, 'false' -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, 'true'  -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, ‘CADEIACARACTERES’ -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, '(' -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, ‘IDENTIFICADOR’ -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, '!' -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, '++' -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr>, '--' -> <Logical Or Expr> ::= <Logical And Expr> <Logical Or Expr 1>
       
<Logical Or Expr 1>, '||' -> <Logical Or Expr 1> ::= '||' <Logical And Expr> <Logical Or Expr 1>
<Logical Or Expr 1>, '=' -> <Logical Or Expr 1> ::= ‘£’
<Logical Or Expr 1>, ']' -> <Logical Or Expr 1> ::= ‘£’
<Logical Or Expr 1>, '}'  -> <Logical Or Expr 1> ::= ‘£’
<Logical Or Expr 1>, ',' -> <Logical Or Expr 1> ::= ‘£’
<Logical Or Expr 1>, ';' -> <Logical Or Expr 1> ::= ‘£’
<Logical Or Expr 1>, 'then' -> <Logical Or Expr 1> ::= ‘£’
<Logical Or Expr 1>, ')' -> <Logical Or Expr 1> ::= ‘£’

<Logical And Expr>, ‘NUMERO’ -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, 'false' -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, 'true' -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, ‘CADEIACARACTERES’ -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, '(' -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, ‘IDENTIFICADOR’ -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, '!' -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, '++' -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>
<Logical And Expr>, '--' -> <Logical And Expr> ::= <Equal Expr> <Logical And Expr 1>

<Logical And Expr 1>, '&&' -> <Logical And Expr 1> ::= '&&' <Equal Expr> <Logical And Expr 1>
<Logical And Expr 1>, '=' -> <Logical And Expr 1> ::= ‘£’    
<Logical And Expr 1>, ']' -> <Logical And Expr 1> ::= ‘£’    
<Logical And Expr 1>, '}' -> <Logical And Expr 1> ::= ‘£’    
<Logical And Expr 1>, ',' -> <Logical And Expr 1> ::= ‘£’    
<Logical And Expr 1>, ';' -> <Logical And Expr 1> ::= ‘£’    
<Logical And Expr 1>, 'then' -> <Logical And Expr 1> ::= ‘£’    
<Logical And Expr 1>, ')' -> <Logical And Expr 1> ::= ‘£’    
<Logical And Expr 1>, '||' -> <Logical And Expr 1> ::= ‘£’    

<Equal Expr>, ‘>’ -> <Equal Expr> ::= <Relational Expr> <Equal Expr 1>
<Equal Expr>, ‘>=’ -> <Equal Expr> ::= <Relational Expr> <Equal Expr 1>
<Equal Expr>, ‘<=’ -> <Equal Expr> ::= <Relational Expr> <Equal Expr 1>
<Equal Expr>, ‘<’ -> <Equal Expr> ::= <Relational Expr> <Equal Expr 1>

<Equal Expr 1>, ‘!=’ -> <Equal Expr 1> ::= <Equal Op> <Relational Expr> <Equal Expr 1> 
<Equal Expr 1>, ‘==’ -> <Equal Expr 1> ::= <Equal Op> <Relational Expr> <Equal Expr 1> 
<Equal Expr 1>, ‘=’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘]’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘}’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘,’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘;’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘then’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘)’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘||’ -> <Equal Expr 1> ::= ‘£’
<Equal Expr 1>, ‘&&’ -> <Equal Expr 1> ::= ‘£’

<Relational Expr>, ‘NUMERO’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘false’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘true’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘CADEIACARACTERES’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘(’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘IDENTIFICADOR’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘!’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘++’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>
<Relational Expr>, ‘--’ -> <Relational Expr> ::= <Additive Expr> <Relational Expr 1>

<Relational Expr 1>, ‘<’ -> <Relational Expr 1> ::= <Relational Op> <Additive Expr> <Relational Expr 1> 
<Relational Expr 1>, ‘>=’ -> <Relational Expr 1> ::= <Relational Op> <Additive Expr> <Relational Expr 1> 
<Relational Expr 1>, ‘<=’ -> <Relational Expr 1> ::= <Relational Op> <Additive Expr> <Relational Expr 1> 
<Relational Expr 1>, ‘>’ -> <Relational Expr 1> ::= <Relational Op> <Additive Expr> <Relational Expr 1> 
<Relational Expr 1>, ‘=’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘]’ -> <Relational Expr 1> ::= ‘£’
<Relational Expr 1>, ‘}’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘!=’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘,’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘;’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘then’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘)’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘||’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘==’ -> <Relational Expr 1> ::= ‘£’ 
<Relational Expr 1>, ‘&&’ -> <Relational Expr 1> ::= ‘£’

<Additive Expr>, ‘NUMERO’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘false’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘true’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘CADEIACARACTERES’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘(’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘IDENTIFICADOR’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘!’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘++’ -> ::= <Mult Expr> <Additive Expr 1>
<Additive Expr>, ‘--’ -> ::= <Mult Expr> <Additive Expr 1>

<Additive Expr 1>, ‘-’ -> <Additive Expr 1> ::= <Additive Op> <Mult Expr> <Additive Expr 1> 
<Additive Expr 1>, ‘+’ -> <Additive Expr 1> ::= <Additive Op> <Mult Expr> <Additive Expr 1> 
<Additive Expr 1>, ‘,’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘then’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘)’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘<=’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘||’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘==’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘&&’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘>’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘=’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘]’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘}’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘<’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘!=’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘>=’ -> <Additive Expr 1> ::= ‘£’
<Additive Expr 1>, ‘;’ -> <Additive Expr 1> ::= ‘£’

<Mult Expr>, ‘NUMERO’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘false’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘true’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘CADEIACARACTERES’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘(’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘IDENTIFICADOR’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘!’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘++’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>
<Mult Expr>, ‘--’ -> <Mult Expr> ::= <Unary Expr> <Mult Expr 1>

<Mult Expr 1>, ‘*’ -> <Mult Expr 1> ::= <Mult Op> <Unary Expr> <Mult Expr 1>
<Mult Expr 1>, ‘/’ -> <Mult Expr 1> ::= <Mult Op> <Unary Expr> <Mult Expr 1>
<Mult Expr 1>, ‘-’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘,’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘+’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘then’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘)’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘<=’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘||’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘==’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘&&’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘>’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘=’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘]’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘}’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘<’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘!=’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘>=’ -> <Mult Expr 1> ::= ‘£’
<Mult Expr 1>, ‘;’ -> <Mult Expr 1> ::= ‘£’

<Unary Expr>, ‘!’ -> <Unary Expr> ::= <Unary Op> <Unary Expr>
<Unary Expr>, ‘++’ -> <Unary Expr> ::= <Unary Op> <Unary Expr>
<Unary Expr>, ‘--’ -> <Unary Expr> ::= <Unary Op> <Unary Expr>
<Unary Expr>, ‘NUMERO’ -> <Unary Expr> ::= <Postfix Expr>
<Unary Expr>, ‘false’ -> <Unary Expr> ::= <Postfix Expr>
<Unary Expr>, ‘true’ -> <Unary Expr> ::= <Postfix Expr>
<Unary Expr>, ‘CADEIACARACTERES’ -> <Unary Expr> ::= <Postfix Expr>
<Unary Expr>, ‘(’ -> <Unary Expr> ::= <Postfix Expr>
<Unary Expr>, ‘IDENTIFICADOR’ -> <Unary Expr> ::= <Postfix Expr>

<Postfix Expr>, ‘NUMERO’ -> <Postfix Expr> ::= <Primary Expr> <Postfix Expr 1>
<Postfix Expr>, ‘false’ -> <Postfix Expr> ::= <Primary Expr> <Postfix Expr 1>
<Postfix Expr>, ‘true’ -> <Postfix Expr> ::= <Primary Expr> <Postfix Expr 1>
<Postfix Expr>, ‘CADEIACARACTERES’ -> <Postfix Expr> ::= <Primary Expr> <Postfix Expr 1>
<Postfix Expr>, ‘(’ -> <Postfix Expr> ::= <Primary Expr> <Postfix Expr 1>
<Postfix Expr>, ‘IDENTIFICADOR’ -> <Postfix Expr> ::= <Primary Expr> <Postfix Expr 1>

<Postfix Expr 1>, ‘[’ -> <Postfix Expr 1> ::= <Postfix Op> <Postfix Expr 1>
<Postfix Expr 1>, ‘(’ -> <Postfix Expr 1> ::= <Postfix Op> <Postfix Expr 1> 
<Postfix Expr 1>, ‘++’ -> <Postfix Expr 1> ::= <Postfix Op> <Postfix Expr 1> 
<Postfix Expr 1>, ‘--’ -> <Postfix Expr 1> ::= <Postfix Op> <Postfix Expr 1> 
<Postfix Expr 1>, ‘.’ -> <Postfix Expr 1> ::= <Postfix Op> <Postfix Expr 1> 
<Postfix Expr 1>, ‘-’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘,’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘+’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘then’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘*’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘)’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘<=’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘||’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘==’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘&&’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘>’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘=’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘]’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘}’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘<’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘!=’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘>=’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘;’ -> <Postfix Expr 1> ::= ‘£’
<Postfix Expr 1>, ‘/’ -> <Postfix Expr 1> ::= ‘£’

<Primary Expr>, ‘IDENTIFICADOR’ -> <Primary Expr> ::= ‘IDENTIFICADOR’
<Primary Expr>, ‘NUMERO’ -> <Primary Expr> ::= ‘NUMERO’
<Primary Expr>, ‘CADEIACARACTERES’ -> <Primary Expr> ::= ‘CADEIACARACTERES’
<Primary Expr>, ‘true’ -> <Primary Expr> ::= 'true'
<Primary Expr>, ‘false’ -> <Primary Expr> ::= 'false'
<Primary Expr>, ‘(’ -> <Primary Expr> ::= '(' <Expr> ')'

<Equal Op>, ‘==’ -> <Equal Op> ::= '=='
<Equal Op>, ‘!=’ -> <Equal Op> ::= '!='

<Relational Op>, ‘<’ -> <Relational Op> ::= '<' 
<Relational Op>, ‘>’ -> <Relational Op> ::= ‘>'
<Relational Op>, ‘<=’ -> <Relational Op> ::= '<='
<Relational Op>, ‘>=’ -> <Relational Op> ::= '>='

<Additive Op>, ‘+’ -> <Additive Op> ::= '+' 
<Additive Op>, ‘-’ -> <Additive Op> ::= '-'

<Mult Op>, ‘*’ -> <Mult Op> ::= '*'
<Mult Op>, ‘/’ -> <Mult Op> ::= '/'

<Unary Op>, ‘++’ -> <Unary Op> ::= '++'
<Unary Op>, ‘--’ -> <Unary Op> ::= '--'
<Unary Op>, ‘!’ -> <Unary Op> ::= '!'

<Postfix Op>, ‘++’ -> <Postfix Op> ::= '++'
<Postfix Op>, ‘--’ -> <Postfix Op> ::=  '--'
<Postfix Op>, ‘[’ -> <Postfix Op> ::= '[' <Expr> ']'
<Postfix Op>, ‘(’ -> <Postfix Op> ::= '(' <Postfix Op lf>
<Postfix Op>, ‘.’ -> <Postfix Op> ::= '.' 'Identifier'

<Postfix Op lf>, ‘)’ -> <Postfix Op lf> ::= ')'
<Postfix Op lf>, ‘NUMERO’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘false’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘true’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘CADEIACARACTERES’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘(’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘IDENTIFICADOR’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘!’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘++’ -> <Postfix Op lf> ::= <Argument List> ')'
<Postfix Op lf>, ‘--’ -> <Postfix Op lf> ::= <Argument List> ')'

<Argument List>, ‘NUMERO’ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘false’ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘true’ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘CADEIACARACTERES’ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘(‘ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘IDENTIFICADOR’ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘!’ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘++’ -> <Argument List> ::= <Assign Expr> <Argument List 1>
<Argument List>, ‘--’ -> <Argument List> ::= <Assign Expr> <Argument List 1>

<Argument List 1>, ',' -> <Argument List 1> ::= ',' <Assign Expr> <Argument List 1>
<Argument List 1>, ')' -> <Argument List 1> ::= '£' 

<Type>, 'int' -> <Type> ::=  'int''
<Type>, 'string' -> <Type>::=  'string'
<Type>, 'float' -> <Type>::=  'float'
<Type>, 'bool' -> <Type>::=  'bool'
<Type>, 'IDENTIFICADOR' -> <Type>::=  'IDENTIFICADOR'

